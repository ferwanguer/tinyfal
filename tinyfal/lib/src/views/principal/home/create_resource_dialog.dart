import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:tinyfal/src/models/client_user.dart';
import 'package:tinyfal/src/models/resource.dart';
import 'package:url_launcher/url_launcher.dart';

class CreateResourceDialog extends StatefulWidget {
  final ClientUser clientUser;

  const CreateResourceDialog({super.key, required this.clientUser});

  @override
  State<CreateResourceDialog> createState() => _CreateResourceDialogState();
}

class _CreateResourceDialogState extends State<CreateResourceDialog> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  bool _isCreating = false;

  @override
  void dispose() {
    _titleController.dispose();
    super.dispose();
  }

  Future<void> _createResource() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isCreating = true;
    });

    try {
      // Create the resource (uid will be auto-generated by Firestore)
      final resource = Resource(
        uid: null, // Will be set by createInFirestore()
        title: _titleController.text.trim(),
        clientUser: widget.clientUser,
        status: null, // Will be set when data starts coming in
      );

      // Generate a token for the resource (local only)
      resource.generateToken();

      // Create in Firestore
      await resource.createInFirestore();

      if (mounted) {
        Navigator.of(context).pop(resource);
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Resource "${resource.title}" created successfully!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Error creating resource: $e'),
            backgroundColor: Colors.red,
            duration: Duration(seconds: 3),
          ),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isCreating = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Row(
        children: [
          Icon(Icons.computer, color: Colors.blue),
          SizedBox(width: 8),
          Text('Create New Resource'),
        ],
      ),
      content: Form(
        key: _formKey,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Enter a name for your new resource. This will help you identify it in your dashboard.',
              style: TextStyle(color: Colors.grey[600], fontSize: 14),
            ),
            SizedBox(height: 16),
            TextFormField(
              controller: _titleController,
              decoration: InputDecoration(
                labelText: 'Resource Name',
                hintText: 'e.g., Production Server, Dev Machine',
                prefixIcon: Icon(Icons.label),
                border: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
                focusedBorder: OutlineInputBorder(
                  borderRadius: BorderRadius.circular(8),
                  borderSide: BorderSide(color: Colors.blue, width: 2),
                ),
              ),
              validator: (value) {
                if (value == null || value.trim().isEmpty) {
                  return 'Please enter a resource name';
                }
                if (value.trim().length < 2) {
                  return 'Resource name must be at least 2 characters';
                }
                if (value.trim().length > 50) {
                  return 'Resource name must be less than 50 characters';
                }
                return null;
              },
              textCapitalization: TextCapitalization.words,
              autofocus: true,
            ),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue[50],
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.blue[200]!),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.info, color: Colors.blue[600], size: 20),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'A unique token will be generated for this resource to receive monitoring data.',
                          style: TextStyle(
                            color: Colors.blue[700],
                            fontSize: 12,
                          ),
                        ),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  GestureDetector(
                    onTap: () async {
                      const url = 'https://literatos.net';

                      try {
                        // Try multiple launch methods for better iOS compatibility
                        final uri = Uri.parse(url);

                        // Method 1: Try with platformDefault mode first
                        try {
                          await launchUrl(
                            uri,
                            mode: LaunchMode.platformDefault,
                          );
                        } catch (e) {
                          // If that fails, try external application
                          try {
                            await launchUrl(
                              uri,
                              mode: LaunchMode.externalApplication,
                            );
                          } catch (e2) {
                            // If that also fails, try in-app web view
                            try {
                              await launchUrl(
                                uri,
                                mode: LaunchMode.inAppWebView,
                              );
                            } catch (e3) {
                              // Final fallback - copy to clipboard
                              await Clipboard.setData(ClipboardData(text: url));
                              if (mounted) {
                                ScaffoldMessenger.of(context).showSnackBar(
                                  SnackBar(
                                    content: Text(
                                      'Link copied to clipboard: $url',
                                    ),
                                    backgroundColor: Colors.blue,
                                    duration: Duration(seconds: 3),
                                  ),
                                );
                              }
                            }
                          }
                        }
                      } catch (e) {
                        if (mounted) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text('Could not open link. Error: $e'),
                              backgroundColor: Colors.orange,
                              duration: Duration(seconds: 5),
                            ),
                          );
                        }
                      }
                    },
                    child: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.help_outline,
                          color: Colors.blue[600],
                          size: 16,
                        ),
                        SizedBox(width: 4),
                        Text(
                          'How can I configure my server?',
                          style: TextStyle(
                            color: Colors.blue[700],
                            fontSize: 12,
                            decoration: TextDecoration.underline,
                            fontWeight: FontWeight.w500,
                          ),
                        ),
                        SizedBox(width: 4),
                        Icon(
                          Icons.open_in_new,
                          color: Colors.blue[600],
                          size: 12,
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
      actions: [
        TextButton(
          onPressed: _isCreating ? null : () => Navigator.of(context).pop(),
          child: Text('Cancel'),
        ),
        ElevatedButton(
          onPressed: _isCreating ? null : _createResource,
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
            padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
          ),
          child: _isCreating
              ? SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                )
              : Text('Create Resource'),
        ),
      ],
    );
  }
}
